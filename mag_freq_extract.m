    All_emg = Partici01_MVCPinch.Analog(2).Data;
filter_emg = zeros(9,size(All_emg,2));
time = (1:size(All_emg,2)) ./1000;
freq_emg = zeros(9,floor(size(All_emg,2)/400));
 
for i =1:9
    data_dum = All_emg(4*i-3,:);
    filter_emg(i,:) = preprocess(data_dum,time);
    freq_emg(i,:) = medf(data_dum,time);
end
 
filter_emg = filter_emg(:,2300:7299);
freq_emg = freq_emg(:,floor(2300/400):floor(7299/400));
plot(filter_emg')
plot(freq_emg')
% normalise
%
mean_emg_during_MPF = mean(filter_emg,2)
mean_freq_during_MPF = mean(freq_emg,2)
 
function y = preprocess(x,tx)
%  Preprocess input x
%    This function expects an input vector x and a vector of time values
%    tx. tx is a numeric vector in units of seconds.
 
% Generated by MATLAB(R) 9.13 and Signal Processing Toolbox 9.1.
% Generated on: 27-Feb-2024 15:17:44
 
Fs = 1/mean(diff(tx)); % Average sample rate
y = bandpass(x,[25 450],Fs,'Steepness',0.85,'StopbandAttenuation',60);
 
y = bandstop(y,[49 51],Fs,'Steepness',0.85,'StopbandAttenuation',60);
 
windowLength = 400; %Value converted to samples
[y,~] = envelope(y,windowLength,'rms');
 
y = smoothdata(y,'movmedian','SamplePoints',tx');
end
 
function out = medf(x,tx)
%  Preprocess input x
%    This function expects an input vector x and a vector of time values
%    tx. tx is a numeric vector in units of seconds.
 
% Generated by MATLAB(R) 9.13 and Signal Processing Toolbox 9.1.
% Generated on: 27-Feb-2024 15:17:44
 
Fs = 1/mean(diff(tx)); % Average sample rate
y = bandpass(x,[25 450],Fs,'Steepness',0.85,'StopbandAttenuation',60);
 
y = bandstop(y,[49 51],Fs,'Steepness',0.85,'StopbandAttenuation',60);
windowLength = 400;
loop = floor(length(x) / windowLength);
out = zeros(1,loop);
for i = 1:loop
    data_dum = y(windowLength * (loop-1)+1:windowLength * loop);
    out(i) = medfreq(data_dum,Fs);
end
 
end